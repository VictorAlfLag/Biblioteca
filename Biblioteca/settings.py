"""
Django settings for Biblioteca project.

Generated by 'django-admin startproject' using Django 4.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as message_constants
import dj_database_url

MESSAGE_TAGS = {
    message_constants.ERROR: 'error',
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-s=ijw7-8rm4r70q+6$n_3874g645ck$9$)3ogjj6w21#9ew5wu')

# SECURITY WARNING: don't run with debug turned on in production!
# Asegúrate de que en Render la variable DEBUG esté como 'False' (cadena de texto)
DEBUG = (os.environ.get('DEBUG', 'False').lower() == 'true')

# ALLOWED_HOSTS
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
ALLOWED_HOSTS += ['localhost', '127.0.0.1'] # Para desarrollo local


# Application definition
LOGIN_REDIRECT_URL = 'home'     # Página a la que se redirige después de iniciar sesión
LOGOUT_REDIRECT_URL = 'login'   # Página a la que se redirige después de cerrar sesión

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Aplicaciones.Cursos',
    # 'storages', # <--- COMENTADO: Desactiva el paquete storages si no usas S3
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Debe estar aquí, después de SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Biblioteca.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Biblioteca.wsgi.application'

# # INICIO: CONFIGURACIÓN DE AWS S3 (COMENTADO PARA ALMACENAMIENTO LOCAL TEMPORAL)
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
# AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-2') # Confirma esta región

# AWS_DEFAULT_ACL = 'public-read' # Muy importante para que los archivos sean legibles públicamente
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' # Usa S3 para media
# MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/' # Esta es la URL base para S3
# # FIN: CONFIGURACIÓN DE AWS S3

# INICIO: CONFIGURACIÓN DE ALMACENAMIENTO DE ARCHIVOS MEDIA LOCAL (TEMPORAL)
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# FIN: CONFIGURACIÓN DE ALMACENAMIENTO DE ARCHIVOS MEDIA LOCAL


DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', f'sqlite:///{BASE_DIR}/BDD.Biblioteca.db'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'es-ec'

TIME_ZONE = 'America/Guayaquil'

USE_I18N = True

USE_TZ = True

# Agregar configuración de mensajes
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# ... (otras configuraciones, sin cambios) ...

# # INICIO: CONFIGURACIÓN DE AWS S3 (COMENTADO)
# ... (toda la configuración de AWS S3 debe seguir comentada) ...
# # FIN: CONFIGURACIÓN DE AWS S3

# INICIO: CONFIGURACIÓN DE ALMACENAMIENTO DE ARCHIVOS MEDIA LOCAL (TEMPORAL)
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# MUY IMPORTANTE: Cambiamos MEDIA_URL y MEDIA_ROOT para que apunten a STATIC_ROOT
# Esto hará que los archivos media se sirvan a través de /static/
MEDIA_URL = '/static/media/' # Ahora los archivos media estarán en /static/media/
MEDIA_ROOT = BASE_DIR / 'staticfiles' / 'media' # Apuntamos a una subcarpeta dentro de staticfiles
# FIN: CONFIGURACIÓN DE ALMACENAMIENTO DE ARCHIVOS MEDIA LOCAL

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Asegúrate de que esto siga igual

# Asegúrate de que tu STATICFILES_DIRS incluya la carpeta donde se guardarán los media,
# aunque si MEDIA_ROOT está dentro de STATIC_ROOT, no es estrictamente necesario.
STATICFILES_DIRS = [
    BASE_DIR / 'Biblioteca' / 'static',
    # BASE_DIR / 'media', # Ya no es necesario si MEDIA_ROOT apunta a staticfiles
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ... (el resto del settings.py, sin cambios) ...